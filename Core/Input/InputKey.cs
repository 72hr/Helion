using Helion.Util;
using System.Collections.Generic;

namespace Helion.Input
{
    public enum InputKey
    {
        Unknown,

        Zero,
        One,
        Two,
        Three,
        Four,
        Five,
        Six,
        Seven,
        Eight,
        Nine,

        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,

        Backtick,
        Tilde,
        Exclamation,
        At,
        Hash,
        Dollar,
        Percent,
        Caret,
        Ampersand,
        Asterisk,
        ParenthesisLeft,
        ParenthesisRight,
        Minus,
        Underscore,
        Equals,
        Plus,
        BracketLeft,
        BracketRight,
        CurlyLeft,
        CurlyRight,
        Backslash,
        Pipe,
        Semicolon,
        Colon,
        Apostrophe,
        Quotation,
        Comma,
        Period,
        DiamondLeft,
        DiamondRight,
        Slash,
        Question,

        ControlLeft,
        ControlRight,
        AltLeft,
        AltRight,
        ShiftLeft,
        ShiftRight,
        Space,
        Enter,
        Backspace,
        Tab,
        Up,
        Down,
        Left,
        Right,

        Escape,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        F11,
        F12,

        Insert,
        Delete,
        Home,
        End,
        PageUp,
        PageDown,
        PrintScreen,
        ScrollLock,
        Pause,
        Numlock,
        CapsLock,
        LeftGUIKey,
        RightGUIKey,
        AltGraph,
    
        MouseLeft,
        MouseMiddle,
        MouseRight,
        MouseCustom1,
        MouseCustom2
    }

    public static class InputKeyHelper
    {
        private static Dictionary<CiString, InputKey> nameToKey = new Dictionary<CiString, InputKey>()
        {
            ["0"] = InputKey.Zero,
            ["1"] = InputKey.One,
            ["2"] = InputKey.Two,
            ["3"] = InputKey.Three,
            ["4"] = InputKey.Four,
            ["5"] = InputKey.Five,
            ["6"] = InputKey.Six,
            ["7"] = InputKey.Seven,
            ["8"] = InputKey.Eight,
            ["9"] = InputKey.Nine,
            ["A"] = InputKey.A,
            ["B"] = InputKey.B,
            ["C"] = InputKey.C,
            ["D"] = InputKey.D,
            ["E"] = InputKey.E,
            ["F"] = InputKey.F,
            ["G"] = InputKey.G,
            ["H"] = InputKey.H,
            ["I"] = InputKey.I,
            ["J"] = InputKey.J,
            ["K"] = InputKey.K,
            ["L"] = InputKey.L,
            ["M"] = InputKey.M,
            ["N"] = InputKey.N,
            ["O"] = InputKey.O,
            ["P"] = InputKey.P,
            ["Q"] = InputKey.Q,
            ["R"] = InputKey.R,
            ["S"] = InputKey.S,
            ["T"] = InputKey.T,
            ["U"] = InputKey.U,
            ["V"] = InputKey.V,
            ["W"] = InputKey.W,
            ["X"] = InputKey.X,
            ["Y"] = InputKey.Y,
            ["Z"] = InputKey.Z,
            ["a"] = InputKey.A,
            ["b"] = InputKey.B,
            ["c"] = InputKey.C,
            ["d"] = InputKey.D,
            ["e"] = InputKey.E,
            ["f"] = InputKey.F,
            ["g"] = InputKey.G,
            ["h"] = InputKey.H,
            ["i"] = InputKey.I,
            ["j"] = InputKey.J,
            ["k"] = InputKey.K,
            ["l"] = InputKey.L,
            ["m"] = InputKey.M,
            ["n"] = InputKey.N,
            ["o"] = InputKey.O,
            ["p"] = InputKey.P,
            ["q"] = InputKey.Q,
            ["r"] = InputKey.R,
            ["s"] = InputKey.S,
            ["t"] = InputKey.T,
            ["u"] = InputKey.U,
            ["v"] = InputKey.V,
            ["w"] = InputKey.W,
            ["x"] = InputKey.X,
            ["y"] = InputKey.Y,
            ["z"] = InputKey.Z,
            ["`"] = InputKey.Backtick,
            ["~"] = InputKey.Tilde,
            ["!"] = InputKey.Exclamation,
            ["@"] = InputKey.At,
            ["#"] = InputKey.Hash,
            ["$"] = InputKey.Dollar,
            ["%"] = InputKey.Percent,
            ["^"] = InputKey.Caret,
            ["&"] = InputKey.Ampersand,
            ["*"] = InputKey.Asterisk,
            ["("] = InputKey.ParenthesisLeft,
            [")"] = InputKey.ParenthesisRight,
            ["-"] = InputKey.Minus,
            ["_"] = InputKey.Underscore,
            ["="] = InputKey.Equals,
            ["+"] = InputKey.Plus,
            ["["] = InputKey.BracketLeft,
            ["]"] = InputKey.BracketRight,
            ["{"] = InputKey.CurlyLeft,
            ["}"] = InputKey.CurlyRight,
            ["\\"] = InputKey.Backslash,
            ["|"] = InputKey.Pipe,
            [";"] = InputKey.Semicolon,
            [":"] = InputKey.Colon,
            ["'"] = InputKey.Apostrophe,
            ["\""] = InputKey.Quotation,
            [","] = InputKey.Comma,
            ["."] = InputKey.Period,
            ["<"] = InputKey.DiamondLeft,
            [">"] = InputKey.DiamondRight,
            ["/"] = InputKey.Slash,
            ["?"] = InputKey.Question,
            ["ctrl-left"] = InputKey.ControlLeft,
            ["ctrl-right"] = InputKey.ControlRight,
            ["alt-left"] = InputKey.AltLeft,
            ["alt-right"] = InputKey.AltRight,
            ["shift-left"] = InputKey.ShiftLeft,
            ["shift-right"] = InputKey.ShiftRight,
            ["space"] = InputKey.Space,
            ["enter"] = InputKey.Enter,
            ["backspace"] = InputKey.Backspace,
            ["tab"] = InputKey.Tab,
            ["up"] = InputKey.Up,
            ["down"] = InputKey.Down,
            ["left"] = InputKey.Left,
            ["right"] = InputKey.Right,
            ["escape"] = InputKey.Escape,
            ["f1"] = InputKey.F1,
            ["f2"] = InputKey.F2,
            ["f3"] = InputKey.F3,
            ["f4"] = InputKey.F4,
            ["f5"] = InputKey.F5,
            ["f6"] = InputKey.F6,
            ["f7"] = InputKey.F7,
            ["f8"] = InputKey.F8,
            ["f9"] = InputKey.F9,
            ["f10"] = InputKey.F10,
            ["f11"] = InputKey.F11,
            ["f12"] = InputKey.F12,
            ["insert"] = InputKey.Insert,
            ["delete"] = InputKey.Delete,
            ["home"] = InputKey.Home,
            ["end"] = InputKey.End,
            ["page-up"] = InputKey.PageUp,
            ["page-down"] = InputKey.PageDown,
            ["print-screen"] = InputKey.PrintScreen,
            ["scroll-lock"] = InputKey.ScrollLock,
            ["pause"] = InputKey.Pause,
            ["num-lock"] = InputKey.Numlock,
            ["caps-lock"] = InputKey.CapsLock,
            ["left-gui-key"] = InputKey.LeftGUIKey,
            ["right-gui-key"] = InputKey.RightGUIKey,
            ["alt-graph"] = InputKey.AltGraph,
            ["mouse-left"] = InputKey.MouseLeft,
            ["mouse-middle"] = InputKey.MouseMiddle,
            ["mouse-right"] = InputKey.MouseRight,
            ["mouse-custom1"] = InputKey.MouseCustom1,
            ["mouse-custom2"] = InputKey.MouseCustom2,
        };

        public static InputKey ToKey(CiString str)
        {
            return nameToKey.TryGetValue(str, out InputKey value) ? value : InputKey.Unknown;
        }
    }
}
