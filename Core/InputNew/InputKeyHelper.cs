using System.Collections.Generic;

namespace Helion.InputNew
{
    /// <summary>
    /// A collection of helper functions for dealing with input keys.
    /// </summary>
    public static class KeyHelper
    {
        private static readonly Dictionary<string, Key> NameToKey = new()
        {
            ["0"] = Key.Zero,
            ["1"] = Key.One,
            ["2"] = Key.Two,
            ["3"] = Key.Three,
            ["4"] = Key.Four,
            ["5"] = Key.Five,
            ["6"] = Key.Six,
            ["7"] = Key.Seven,
            ["8"] = Key.Eight,
            ["9"] = Key.Nine,
            ["A"] = Key.A,
            ["B"] = Key.B,
            ["C"] = Key.C,
            ["D"] = Key.D,
            ["E"] = Key.E,
            ["F"] = Key.F,
            ["G"] = Key.G,
            ["H"] = Key.H,
            ["I"] = Key.I,
            ["J"] = Key.J,
            ["K"] = Key.K,
            ["L"] = Key.L,
            ["M"] = Key.M,
            ["N"] = Key.N,
            ["O"] = Key.O,
            ["P"] = Key.P,
            ["Q"] = Key.Q,
            ["R"] = Key.R,
            ["S"] = Key.S,
            ["T"] = Key.T,
            ["U"] = Key.U,
            ["V"] = Key.V,
            ["W"] = Key.W,
            ["X"] = Key.X,
            ["Y"] = Key.Y,
            ["Z"] = Key.Z,
            ["a"] = Key.A,
            ["b"] = Key.B,
            ["c"] = Key.C,
            ["d"] = Key.D,
            ["e"] = Key.E,
            ["f"] = Key.F,
            ["g"] = Key.G,
            ["h"] = Key.H,
            ["i"] = Key.I,
            ["j"] = Key.J,
            ["k"] = Key.K,
            ["l"] = Key.L,
            ["m"] = Key.M,
            ["n"] = Key.N,
            ["o"] = Key.O,
            ["p"] = Key.P,
            ["q"] = Key.Q,
            ["r"] = Key.R,
            ["s"] = Key.S,
            ["t"] = Key.T,
            ["u"] = Key.U,
            ["v"] = Key.V,
            ["w"] = Key.W,
            ["x"] = Key.X,
            ["y"] = Key.Y,
            ["z"] = Key.Z,
            ["`"] = Key.Backtick,
            ["~"] = Key.Tilde,
            ["!"] = Key.Exclamation,
            ["@"] = Key.At,
            ["#"] = Key.Hash,
            ["$"] = Key.Dollar,
            ["%"] = Key.Percent,
            ["^"] = Key.Caret,
            ["&"] = Key.Ampersand,
            ["*"] = Key.Asterisk,
            ["("] = Key.ParenthesisLeft,
            [")"] = Key.ParenthesisRight,
            ["-"] = Key.Minus,
            ["_"] = Key.Underscore,
            ["="] = Key.Equals,
            ["+"] = Key.Plus,
            ["["] = Key.BracketLeft,
            ["]"] = Key.BracketRight,
            ["{"] = Key.CurlyLeft,
            ["}"] = Key.CurlyRight,
            ["\\"] = Key.Backslash,
            ["|"] = Key.Pipe,
            [";"] = Key.Semicolon,
            [":"] = Key.Colon,
            ["'"] = Key.Apostrophe,
            ["\""] = Key.Quotation,
            [","] = Key.Comma,
            ["."] = Key.Period,
            ["<"] = Key.DiamondLeft,
            [">"] = Key.DiamondRight,
            ["/"] = Key.Slash,
            ["?"] = Key.Question,
            ["ctrl-left"] = Key.ControlLeft,
            ["ctrl-right"] = Key.ControlRight,
            ["alt-left"] = Key.AltLeft,
            ["alt-right"] = Key.AltRight,
            ["shift-left"] = Key.ShiftLeft,
            ["shift-right"] = Key.ShiftRight,
            ["space"] = Key.Space,
            ["enter"] = Key.Enter,
            ["backspace"] = Key.Backspace,
            ["tab"] = Key.Tab,
            ["up"] = Key.Up,
            ["down"] = Key.Down,
            ["left"] = Key.Left,
            ["right"] = Key.Right,
            ["escape"] = Key.Escape,
            ["f1"] = Key.F1,
            ["f2"] = Key.F2,
            ["f3"] = Key.F3,
            ["f4"] = Key.F4,
            ["f5"] = Key.F5,
            ["f6"] = Key.F6,
            ["f7"] = Key.F7,
            ["f8"] = Key.F8,
            ["f9"] = Key.F9,
            ["f10"] = Key.F10,
            ["f11"] = Key.F11,
            ["f12"] = Key.F12,
            ["insert"] = Key.Insert,
            ["delete"] = Key.Delete,
            ["home"] = Key.Home,
            ["end"] = Key.End,
            ["page-up"] = Key.PageUp,
            ["page-down"] = Key.PageDown,
            ["print-screen"] = Key.PrintScreen,
            ["scroll-lock"] = Key.ScrollLock,
            ["pause"] = Key.Pause,
            ["num-lock"] = Key.Numlock,
            ["caps-lock"] = Key.CapsLock,
            ["left-gui-key"] = Key.LeftGUIKey,
            ["right-gui-key"] = Key.RightGUIKey,
            ["alt-graph"] = Key.AltGraph,
            ["mouse-left"] = Key.MouseLeft,
            ["mouse-middle"] = Key.MouseMiddle,
            ["mouse-right"] = Key.MouseRight,
            ["mouse-custom1"] = Key.MouseCustom1,
            ["mouse-custom2"] = Key.MouseCustom2,
            ["mouse-custom3"] = Key.MouseCustom3,
            ["mouse-custom4"] = Key.MouseCustom4,
            ["mouse-custom5"] = Key.MouseCustom5,
            ["mouse-custom6"] = Key.MouseCustom6,
            ["mouse-custom7"] = Key.MouseCustom7,
            ["mouse-custom8"] = Key.MouseCustom8,
            ["mouse-custom9"] = Key.MouseCustom9,
        };

        /// <summary>
        /// Maps a string onto an input key.
        /// </summary>
        /// <param name="str">The string to get the input key for.</param>
        /// <returns>The input key for the string, or the unknown value if the
        /// string does not map onto anything.</returns>
        public static Key ToKey(string str)
        {
            return NameToKey.TryGetValue(str.ToLower(), out Key value) ? value : Key.Unknown;
        }
    }
}
